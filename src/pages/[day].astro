---
import { DynamoDBClient, QueryCommand } from '@aws-sdk/client-dynamodb';
import { unmarshall } from '@aws-sdk/util-dynamodb';
import { addDays, format, isValid, parse } from 'date-fns';
import { formatInTimeZone } from 'date-fns-tz';

import Layout from '../layouts/Layout.astro';
import { sameChannel } from '../lib/deduplicationMatches';
import MatchRow from '../components/MatchRow.astro';
import getClubLogo from '../lib/getClubLogo';
import Navigation from '../components/Navigation.astro';

interface Match {
  id: string;
  away: string;
  chanel: string;
  competition: string;
  end: number;
  home: string;
  isLigueShow: boolean;
  isLive: boolean | string;
  start: number;
  title: string;
}

const dayFormat = 'yyyy-MM-dd';
const { day }: { day?: string } = Astro.params;
const dayDate = parse(day, dayFormat, new Date());
if (!isValid(dayDate)) {
  return Astro.redirect('/not-valid');
}
const {
  AWS_REGION = process.env.AWS_REGION,
  AWS_ACCESS_KEY_ID = process.env.AWS_ACCESS_KEY_ID,
  AWS_SECRET_ACCESS_KEY = process.env.AWS_SECRET_ACCESS_KEY,
} = import.meta.env;
const client = new DynamoDBClient({
  region: AWS_REGION,
  credentials: {
    accessKeyId: AWS_ACCESS_KEY_ID,
    secretAccessKey: AWS_SECRET_ACCESS_KEY,
  },
});
const QueryInput = {
  TableName: 'BeIN_schedule',
  IndexName: 'utcDay-start-index',
  KeyConditionExpression: 'utcDay = :specificDay',
  ProjectionExpression:
    '#startTime, id, away, chanel, home, isLigueShow, isLive, title',
  ExpressionAttributeNames: {
    '#startTime': 'start',
  },
  ExpressionAttributeValues: {
    ':specificDay': {
      S: day,
    },
  },
};
const { timezone: timeZone = 'America/Edmonton' } = Astro.request.cf || {};
const dedupMatches: Match[] = await client
  .send(new QueryCommand(QueryInput))
  .then(({ Items }) =>
    Items.map(Item => unmarshall(Item))
      .filter(({ isLive }) => isLive)
      .reduce((acc, next) => {
        const { chanel, start, away, home } = next;
        if (
          acc.some((el) => {
            return (
              getClubLogo(el.away) === getClubLogo(away) &&
              getClubLogo(el.home) === getClubLogo(home) &&
              (el.start + 10 * 60 * 1000 > start ||
                el.start - 10 * 60 * 1000 < start) &&
              sameChannel(el.chanel, chanel)
            );
          })
        ) {
          return acc;
        }
        return acc.concat(next);
      }, []),
  );
const matches = dedupMatches.map((el) => {
  return {
    ...el,
    startTime: formatInTimeZone(new Date(el.start), timeZone, 'HH:mm'),
  };
});

const renderDate = formatInTimeZone(
  new Date(),
  timeZone,
  'yyyy-MM-dd HH:mm:ss',
);

const prevURL = format(addDays(dayDate, -1), dayFormat);
const nextURL = format(addDays(dayDate, 1), dayFormat);
---

<Layout title="Ligue 1 TV Schedule">
  <div class="min-h-screen flex flex-col">
    <main class="container mx-auto mb-5 px-2">
      <h1 class="text-6xl font-normal leading-normal mt-0 mb-2">
        Welcome to <span class="text-gradient">Ligue 1</span>
      </h1>
      <ul role="list" class="space-y-10">
        {
          matches.map((match) => {
            return (
              <MatchRow
                home={match.home}
                away={match.away}
                startTime={match.startTime}
                channel={match.chanel}
                isLigueShow={match.isLigueShow}
              />
            );
          })
        }
      </ul>
    </main>
    <Navigation nextURL={nextURL} prevURL={prevURL} />
  </div>
  <div class="text-xs text-slate-500 text-right">
    Rendered at {renderDate}
  </div>
</Layout>
