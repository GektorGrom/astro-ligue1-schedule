---
import { DynamoDBClient, QueryCommand } from '@aws-sdk/client-dynamodb';
import { unmarshall } from '@aws-sdk/util-dynamodb';
import { addDays, format, isValid, parse } from 'date-fns';
import { formatInTimeZone } from 'date-fns-tz';

import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { sameChannel } from '../lib/deduplicationMatches';
import MatchRow from '../components/MatchRow.astro';

const dayFormat = 'yyyy-MM-dd';
const { day } = Astro.params;
const dayDate = parse(day, dayFormat, new Date());
if (!isValid(dayDate)) {
  return Astro.redirect('/not-valid');
}
const client = new DynamoDBClient({
  region: import.meta.env['AWS_REGION'],
  credentials: {
    accessKeyId: import.meta.env['AWS_ACCESS_KEY_ID'],
    secretAccessKey: import.meta.env['AWS_SECRET_ACCESS_KEY'],
  },
});
const QueryInput = {
  TableName: 'BeIN_schedule',
  IndexName: 'utcDay-start-index',
  KeyConditionExpression: 'utcDay = :specificDay',
  ProjectionExpression:
    '#startTime, id, away, chanel, home, isLigueShow, isLive, title',
  ExpressionAttributeNames: {
    '#startTime': 'start',
  },
  ExpressionAttributeValues: {
    ':specificDay': {
      S: day,
    },
  },
};
const timeZone = Astro.request.cf?.timezone || 'America/Edmonton';
const dedupMatches = await client
  .send(new QueryCommand(QueryInput))
  .then(({ Items }) =>
    Items.map(unmarshall)
      .filter(({ isLive }) => isLive)
      .reduce((acc, next) => {
        const { chanel, start, away, home } = next;
        if (
          acc.some((el) => {
            return (
              el.away === away &&
              el.home === home &&
              (el.start + 10 * 60 * 1000 > start ||
                el.start - 10 * 60 * 1000 < start) &&
              sameChannel(el.chanel, chanel)
            );
          })
        ) {
          return acc;
        }
        return acc.concat(next);
      }, []),
  );
const matches = dedupMatches.map((el) => {
  return {
    ...el,
    startTime: formatInTimeZone(
      new Date(el.start),
      timeZone,
      'HH:mm',
    ),
  };
});

const renderDate = formatInTimeZone(
  new Date(),
  timeZone,
  'yyyy-MM-dd HH:mm:ss',
);

const prevURL = format(addDays(dayDate, -1), dayFormat);
const nextURL = format(addDays(dayDate, 1), dayFormat);
---

<Layout title="Ligue 1 TV Schedule">
  <main class="container mx-auto">
    <h1>Welcome to <span class="text-gradient">Ligue 1</span></h1>
    <div class="grid grid-cols-2">
      <div>
        <a href={prevURL}>Prev</a>
      </div>
      <div class="text-right">
        <a href={nextURL}>Next</a>
      </div>
    </div>
    <ul role="list" class="space-y-10">
      {
        matches.map((match) => {
          return (
            <MatchRow
              home={match.home}
              away={match.away}
              startTime={match.startTime}
              channel={match.chanel}
              isLigueShow={match.isLigueShow}
            />
          );
        })
      }
    </ul>
    <div class="text-xs text-slate-500 mt-3 text-right">
      Rendered at {renderDate}
    </div>
  </main>
</Layout>
