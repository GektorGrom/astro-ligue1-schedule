---
import { DynamoDBClient, QueryCommand } from '@aws-sdk/client-dynamodb';
import { unmarshall } from '@aws-sdk/util-dynamodb';
import { addDays, format, isValid, parse } from 'date-fns';
import { formatInTimeZone } from 'date-fns-tz';

import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import { sameChannel } from '../lib/deduplicationMatches';

const dayFormat = 'yyyy-MM-dd';
const { day } = Astro.params;
const dayDate = parse(day, dayFormat, new Date());
if (!isValid(dayDate)) {
  return Astro.redirect('/not-valid');
}
const client = new DynamoDBClient({
  region: import.meta.env['AWS_REGION'],
  credentials: {
    accessKeyId: import.meta.env['AWS_ACCESS_KEY_ID'],
    secretAccessKey: import.meta.env['AWS_SECRET_ACCESS_KEY'],
  },
});
const QueryInput = {
  TableName: 'BeIN_schedule',
  IndexName: 'utcDay-start-index',
  KeyConditionExpression: 'utcDay = :specificDay',
  ProjectionExpression:
    '#startTime, id, away, chanel, home, isLigueShow, isLive, title',
  ExpressionAttributeNames: {
    '#startTime': 'start',
  },
  ExpressionAttributeValues: {
    ':specificDay': {
      S: day,
    },
  },
};
const timeZone = Astro.request.cf?.timezone || 'America/Edmonton';
const dedupMatches = await client
  .send(new QueryCommand(QueryInput))
  .then(({ Items }) =>
    Items.map(unmarshall)
      .filter(({ isLive }) => isLive)
      .reduce((acc, next) => {
        const { chanel, start, away, home } = next;        
        if (acc.some(el => {
          return el.away === away &&
          el.home === home &&
          ((el.start + (10 * 60 * 1000)) > start || (el.start - (10 * 60 * 1000)) < start)
           &&
          sameChannel(el.chanel, chanel)
        })) {
          return acc;
        }
        return acc.concat(next)
      }, []),
  );
const matches = dedupMatches.map((el) => {
  return {
    ...el,
    startTime: formatInTimeZone(
      new Date(el.start),
      timeZone,
      'yyyy-MM-dd HH:mm',
    ),
  };
});

const renderDate = formatInTimeZone(
  new Date(),
  timeZone,
  'yyyy-MM-dd HH:mm:ss',
);

const prevURL = format(addDays(dayDate, -1), dayFormat);
const nextURL = format(addDays(dayDate, 1), dayFormat);
---

<Layout title="Ligue 1 TV Schedule">
  <main class="min-h-screen">
    <h1>Welcome to <span class="text-gradient">Ligue 1</span></h1>
    <h2>User Time Zone: {timeZone}</h2>
    <div class="grid grid-cols-2">
      <div>
        <a href={prevURL}>Prev</a>
      </div>
      <div class="text-right">
        <a href={nextURL}>Next</a>
      </div>
    </div>
    <ul role="list" class="link-card-grid">
      {
        matches.map((match) => {
          return (
            <Card
              key={match.title}
              href="https://ligue1.com/"
              title={`${match.home} vs ${match.away}`}
              body={match.title}
              startTime={match.startTime}
              channel={match.chanel}
            />
          );
        })
      }
    </ul>
    <div>
      Rendered at {renderDate}
    </div>
  </main>
</Layout>

<style>
  :root {
    --astro-gradient: linear-gradient(0deg, #4f39fa, #da62c4);
  }

  h1 {
    margin: 2rem 0;
  }

  main {
    margin: auto;
    padding: 1em;
    max-width: 60ch;
  }

  .text-gradient {
    font-weight: 900;
    background-image: var(--astro-gradient);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 100% 200%;
    background-position-y: 100%;
    border-radius: 0.4rem;
    animation: pulse 4s ease-in-out infinite;
  }

  @keyframes pulse {
    0%,
    100% {
      background-position-y: 0%;
    }
    50% {
      background-position-y: 80%;
    }
  }

  .instructions {
    line-height: 1.6;
    margin: 1rem 0;
    background: #4f39fa;
    padding: 1rem;
    border-radius: 0.4rem;
    color: var(--color-bg);
  }

  .instructions code {
    font-size: 0.875em;
    border: 0.1em solid var(--color-border);
    border-radius: 4px;
    padding: 0.15em 0.25em;
  }

  .link-card-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
    gap: 1rem;
    padding: 0;
  }
</style>
